#!/bin/bash

destination="$2"

GON_BACKUP_DIRS=(
    "--exclude=$HOME/Dropbox/Media_Library/"
    "$HOME/Desktop"
    "$HOME/Downloads"
    "$HOME/Dropbox"
    "$HOME/.mozilla"
    "$HOME/.ssh"
    "$HOME/.cert"
    "$HOME/.var/app/org.remmina.Remmina/data/remmina"
    "$HOME/.var/app/org.remmina.Remmina/config/remmina"
    "$HOME/.var/app/org.mozilla.Thunderbird/.thunderbird"
)

WORK_SETTINGS_DIRS=(
    "$HOME/.local/MATLAB"
    "$HOME/.local/stata14"
    "$HOME/.local/stata-png-fix"
)

SMALL_EXCLUDE_DIRS=(
    "--exclude=$HOME/Dropbox/Backup"
    "--exclude=$HOME/Dropbox/Music"
    "--exclude=$HOME/Downloads"
)

list_mountpoints() {
    lsblk -no MOUNTPOINTS
}

get_mountpoint() {
    # Asks user to select a /dev/sdX or /dev/nvmeXXX device and
    # returns the selected device.
    local mountpoints number
    local -i n=1
    # Sata and NVME mountpoints array
    mountpoints=($(list_mountpoints | grep -vE "/boot|/$|\[SWAP\]$"))
    lsblk -n >&1 1>&2
    printf "\nPlease select a drive by typing the corresponding number.\n" >&1 1>&2
    for i in "${mountpoints[@]}"; do
        printf "\t%s - %s\n" $n $i >&1 1>&2
        ((n++))
    done
    read -rep "Enter drive's number: " number
    while [[ $(("$number" - 1)) -ge "${#mountpoints[@]}" ]] || [ -z "$number" ]; do
        echo "Number '$number' is not an available option." >&1 1>&2
        unset number
        read -rep "Select a drive by typing the corresponding number: " number
    done

    echo "${mountpoints[$(("$number" - 1))]}"
}

filesystem_check() {
    # 'local' must be used
    local source_dir="$1"
    local destination="$2"

    [[ $source_dir == --exclude=* ]] && return

    # TODO: Check if destination exists before using dirname?
    local destination=$(dirname "$destination")
    # Expecting a directory inside an extrenal drive.
    # If the destination is "/mnt/drive" the use of "dirname" fails.

    if df -P -- "$destination" "$source_dir" | awk 'NR==2 {dev1=$1} NR==3 {exit($1!=dev1)}'; then
        echo "'$destination' and '$source_dir' are on the same filesystem"
        echo "More directories may also have this issue."
        # rmdir "$source_dir" 2>/dev/null || echo "$source_dir is not empty."
        exit 1
    fi
}

_rsync() {
    sudo rsync -aAXH --relative -h --info=progress2 --prune-empty-dirs --delete $@
    # rsync -aAXH -h --info=progress2 --prune-empty-dirs --delete $@
}

convertsecs() {
    ((h = ${1} / 3600))
    ((m = (${1} % 3600) / 60))
    ((s = ${1} % 60))
    # TODO: move printf
    printf "Backup ended in %02d:%02d:%02d\n" $h $m $s
}

dconf_dump() {
    dconf dump / | sudo tee $1/dconf_FULL.ini >/dev/null
    [[ $(command -v dump_dconf_extension_settings) ]] && dump_dconf_extension_settings &&
        _rsync "$HOME/.config/dconf" "$1"

}

get_data_sources() {

    case $(hostname) in
    gon | p14s)
        # Continue
        ;;
    *)
        printf "Hostname '%s' not found. Nothing was/will be backed up\n\n" $(hostname)
        exit 1
        ;;
    esac

    local size="$1"
    case "$size" in
    small)
        data_sources_list=("${SMALL_EXCLUDE_DIRS[@]}" "${GON_BACKUP_DIRS[@]}")
        ;;

    big | full)
        data_sources_list=("${GON_BACKUP_DIRS[@]}" "${WORK_SETTINGS_DIRS[@]}")
        ;;

    *)
        exit 1
        ;;
    esac

    echo "${data_sources_list[@]}"
}

main() {
    [ -z $destination ] && destination="$(get_mountpoint)"

    destination="$destination/backups"

    data_sources_list=$(get_data_sources $1)

    # Check the exit status of the get_data_sources
    if [ $? -ne 0 ]; then
        printf "Available arguments small|big|full\n" &&
            printf "Nothing was/will be backed up\n\n" &&
            exit 1
    fi

    for dir in $data_sources_list; do
        filesystem_check "$dir" "$destination"
    done

    printf "Backup '%s' to '%s' with the following argument? '%s'\n" $(hostname) $destination "$1"
    printf "The following directories are going to be backed up:"
    echo " $data_sources_list" | sed 's/ /"\n- "/g' | sed 's/^"//'
    read -r

    mkdir -p $destination || exit 1

    local start_="$(date -u +%s)"
    local start_time=$(date +%F-%T)
    local destination="$destination/$(hostname)_backup"

    printf "%s\nStarting backup to: %s\n\n" "$start_time" "$destination"
    sudo rsync \
        -aAXH \
        --relative \
        -h \
        --info=progress2 \
        --prune-empty-dirs \
        $data_sources_list "$destination" # &&
    dconf_dump $destination &&
        sudo btrfs subvolume snapshot "$destination" "${destination}_$start_time" &&
        echo "Snapshot created"

    end_="$(date -u +%s)"
    convertsecs $((end_ - start_))
}

main "$1" "$2"
