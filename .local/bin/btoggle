#!/bin/bash

# Toggles the connection with a given device.
# Accepts only one device's mac address at a time.

notify() {
	notify-send --hint=int:transient:1 "$(basename "$0")" "$@"
}

is_mac_address() {
	[[ "$1" =~ ^([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}$ ]]
}

get_mac_address() {
	device="$1"

	if [ "$device" = "" ]; then
		device="headset"
	fi

	# Used to create aliases and make it easier to use it from the command line
	case $device in
	earbuds)
		# honor earbuds
		echo "E0:9D:FA:C8:22:78"
		return
		;;

	headset)
		# wh1000mx5
		echo "88:C9:E8:30:3B:4F"
		return
		;;

	*)
		echo "$device"
		return
		;;
	esac
}

get_device_name() {
	bluetoothctl info $mac_address | grep "Name:" | awk -F: '{print $2}'
}

get_power_status(){
	powered="$(bluetoothctl show | grep "Powered:" | awk -F": " '{print $2}')"
	[[ "$powered" == "yes" ]]
}

main() {

	mac_address=$(get_mac_address "$1")
	echo $mac_address

	is_mac_address "$mac_address" || echo "Given mac address: '${mac_address}' is invalid."

	# coproc bluetoothctl
	# echo -e 'info ${mac_address}\nexit' >&${COPROC[1]}
	# output=$(cat <&${COPROC[0]})

	output=$(bluetoothctl info $mac_address)

	dev_status="$(grep ${mac_address} -A9 <<< $output)"

	device=$(get_device_name)

	if (grep "Connected: yes" <<< "$dev_status") ; then
	# if (is_connected "$mac_address"); then
		notify "Disconnecting: '${device}'"

		# Turn off bluetooth if only one device is connected.
		[[ $(bluetoothctl devices Connected | wc -l) == 1 ]] &&
			bluetoothctl power off

		bluetoothctl -- disconnect ${mac_address}
	else
		notify "Attempting to connect device: '${device}'"
		# _connect $mac_address
		get_power_status || { 
			notify "Turning on Bluethooth adapter...."
			rfkill unblock all || notify "'rfkill unblock all' failed."
			bluetoothctl power on; sleep 1; }
		bluetoothctl -- connect ${mac_address}
	fi
}


main $@

# The following need rework:

exit

# get_device_name() {
# 	mac_address="$1"
# 	bluetoothctl info $mac_address | grep "Name:" | awk -F: '{print $2}'
# }

_connect() {
	max_attempts=5
	attempt_count=0

	mac_address="$1"

	get_power_status || {
		notify "Turning on Bluethooth adapter...."
		rfkill unblock all || notify "'rfkill unblock all' failed."
		bluetoothctl power on
		sleep 1
	}
	bluetoothctl -- connect ${mac_address}

	while [ $attempt_count -lt $max_attempts ]; do
		connection_info=$(bluetoothctl connect $mac_address) && sleep 1
		# connect_status="$(grep -q "Connection successful" <<<$connection_info)"
		# echo connect_status=$connect_status
 
		# if [ $connect_status -eq 0 ]; then
		if grep -q "Connection successful" <<<$connection_info; then
		
			# Connection successful
			break
		else
			# Connection failed
			((attempt_count++))
		fi
	done

	if [ $attempt_count -eq $max_attempts ]; then
		# If connection failed 5 times, restart services
		notify "Connection attempts failed. Restarting services..."
		systemctl --user restart wireplumber pipewire pipewire-pulse && sleep 3
		bluetoothctl -- connect ${mac_address}
	fi

}

is_connected() {
	mac_address="$1"
	mac_info=$(bluetoothctl info $mac_address)
	dev_status="$(grep ${mac_address} -A9 <<<$mac_info)"
	grep "Connected: yes" <<<"$dev_status"
	return $?
}
