#!/bin/bash

full_backup=(
    "$HOME/Dropbox/Backup"
    "$HOME/Dropbox/Media Library/Music"
    "$HOME/Dropbox/Documents"
    "$HOME/Dropbox/Games"
    "$HOME/Dropbox/Pictures"
    "$HOME/Dropbox/Programs"
    "$HOME/Dropbox/Videos"
    "$HOME/.var/app/org.mozilla.Thunderbird/.thunderbird"
    "$HOME/.mozilla"
    "$HOME/.ssh"
)


basic_backup=(
    "$HOME/Dropbox/Documents"
    "$HOME/Dropbox/Games"
    "$HOME/Dropbox/Pictures"
    "$HOME/Dropbox/Programs"
    "$HOME/Dropbox/Videos"
    "$HOME/.var/app/org.mozilla.Thunderbird/.thunderbird"
    "$HOME/.mozilla"
    "$HOME/.ssh"
)


# ask_delete() {
    
#     prompt=$(
# 		cat <<-EOF
# 		Backup interrupted.
# 		Would you like to delete $backup_dir ? [y/N]:
# 		EOF
#     )
    
#     read -rep "$prompt" reply
#     if [[ $reply =~ ^[Yy]$ ]]; then
#         sudo rm -rf "$backup_dir"
#     fi
# }


filesystem_check(){
    # 'local' must be used
    local source_dir="$1"
    local destination="$2"

    # TODO: Check if destination exists before using dirname?

    # Expecting a directory inside an extrenal drive. 
    # If the destination is "/mnt/drive" the use of "dirname" fails.
    local destination=$(dirname "$destination")

    if df -P -- "$destination" "$source_dir" | awk 'NR==2 {dev1=$1} NR==3 {exit($1!=dev1)}'; then
        echo "$destination and $source_dir are on the same filesystem"
        # rmdir "$source_dir" 2>/dev/null || echo "$source_dir is not empty."
        exit 1
    fi
}


_rsync() {
    sudo rsync -aAXH -h --info=progress2 --prune-empty-dirs --delete $@
}


convertsecs() {
    ((h=${1}/3600))
    ((m=(${1}%3600)/60))
    ((s=${1}%60))
    # TODO: move printf
    printf "Backup ended in %02d:%02d:%02d\n" $h $m $s
}


dconf_dump(){
    dconf dump /
}


main() {

    # echo "${basic_backup[*]}"
    local start_="$(date -u +%s)"
    local start_time=$(date +%F-%T)
    local destination=/mnt/efd0/gon_backup

    local size="$1"
    case "$size" in
        small)
            data_sources_list=( "${basic_backup[@]}" )
        ;;
        
        big)
            data_sources_list=( "${basic_backup[@]}" )
        ;;
        
        *)
            printf "Nothing was/will be backed up\n\n"
            exit
        ;;
    esac

    for dir in "${data_sources_list[@]}"; do
        filesystem_check "$dir" "$destination"
    done

    printf "%s\nStarting backup to: %s\n\n" "$start_time" "$destination"
    _rsync ${data_sources_list[@]} "$destination" &&
    dconf_dump | sudo tee "$destination/dconf" >/dev/null &&
    sudo btrfs subvolume snapshot "$destination" "${destination}_$start_time"

    end_="$(date -u +%s)"
    convertsecs $((end_-start_))
}


# INTERRUPTED='False'

# trap 'ask_delete; exit 2' INT TERM

main "$1"
